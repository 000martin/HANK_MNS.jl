var documenterSearchIndex = {"docs":
[{"location":"#Replication-of-McKay,-Nakamura,-and-Steinsson-(2017)","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"","category":"section"},{"location":"","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"This is a replication of \"The Power of Forward Guidance\" by Alisdair McKay, Emi Nakamura, and Jón Steinsson.","category":"page"},{"location":"","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"The project was part of our evaluation for the course Numerical Methods at SciencesPo Paris in Spring 2021. ","category":"page"},{"location":"","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"In this replication study, we do ...","category":"page"},{"location":"","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"Modules = [HANK_MNS]","category":"page"},{"location":"#HANK_MNS.params","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.params","text":"A structure that stores the parameter vector of the model.\n\n\n\n\n\n","category":"type"},{"location":"#HANK_MNS.steady_state","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.steady_state","text":"A structure that saves the steady state of the model.\n\n\n\n\n\n","category":"type"},{"location":"#HANK_MNS.transition_CompMkts","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.transition_CompMkts","text":"A structure that stores the complete markets transition.\n\n\n\n\n\n","category":"type"},{"location":"#HANK_MNS.transition_full","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.transition_full","text":"A structure that stores the full model transition.\n\n\n\n\n\n","category":"type"},{"location":"#HANK_MNS.EGM-Tuple{Matrix{Float64}, Float64, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.EGM","text":"EGM(c_next::Array{Float64,2},β::Float64, Rs::Array{Float64,1}, ws::Array{Float64,1},\nτs::Array{Float64,1}, div::Array{Float64,1},p::params)\n\nConducts one iteration on consumption and labor supply using the endogenous grid method (EGM). Inputs need to be 2x1 arrays of wage, interest, etc. in current and previous period.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.EGM_SS-Tuple{Matrix{Float64}, Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.EGM_SS","text":"EGM_SS(c_guess::Array{Float64,2}, β::Float64,Y::Float64, p::params; T::Int=30, \n       maxit::Int = 500, tol::Float64 = 1e-7)\n\nComputes household steady state (SS) consumption using the endogenous grid method (EGM).\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.aggregate_C_L-Tuple{Vector{Float64}, Matrix{Float64}, Float64, Float64, Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.aggregate_C_L","text":"aggregate_C_L(D::Array{Float64,1}, c_policies::Array{Float64,1}, R::Float64, \n              w::Float64, τ::Float64, div::Float64)\n\nComputes aggregate consumption and labor supply of the household sector. Equivalent to expect_C in the MNS code.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.check_steady_state-Tuple{Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.check_steady_state","text":"check_steady_state(β::Float64,Y::Float64,p::params,return_distance::Bool=false)\n\nFor given β, Y and parameters, this function computes consumption and labor suppy  as implied by the household decisions and returns the distance between output  implied by labor and output implied by consumption as well as the distance between household asset choices and the asset target. It can be used in an Root-Finding algorithm to find the β corresponding to the asset and interest rate target. NOTE: This function is not used in the current implemenation of the model.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.egm_solve_constrained-Tuple{Vector{Float64}, Int64, Float64, Float64, Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.egm_solve_constrained","text":"egm_solve_constrained(bs::Array{Float64,1},ip::Int,w::Float64,τ::Float64,\n                      div::Float64,R::Float64,p::params)\n\nBacks out consumption level of constrained household.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.find_closest_lower-Tuple{Float64, Vector{Float64}}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.find_closest_lower","text":"find_closest_lower(x::Float64,grid::Array{Float64,1})\n\nHelper function for lineartrans. Finds the next lower asset point on the grid for savings choice x.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.forward_dist-Tuple{Vector{Float64}, SparseArrays.SparseMatrixCSC}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.forward_dist","text":"forward_dist(D::Array{Float64,1},Pi::SparseMatrixCSC)\n\nCalculates asset distribution in next period given transition matrix Pi and current distribution D.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.forwardmat-Tuple{Matrix{Float64}, Float64, Float64, Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.forwardmat","text":"forwardmat(c_opt::Array{Float64,2},R::Float64,w::Float64,τ::Float64,div::Float64)\n\nGenerates a transition matrix for the aggregate wealth distribution. Uses the helper function lineartrans() as  in the original code.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_cnbp-Tuple{Vector{Float64}, Matrix{Float64}, Float64, Float64, Float64, Float64, Int64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_cnbp","text":"get_cnbp(xthis::Array{Float64},c::Array{Float64},R::Float64,w::Float64,\n         τ::Float64,p::params,inc_idx::Int)\n\nHelper function that, given the HH policy function and factor prices, taxes, etc., interpolates the HH policy function to the values in xthis and computes corresponding labor supply and savings.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_figures_3_4-Tuple{}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_figures_3_4","text":"get_figures_3_4(;TR::Int64 = 20, T::Int64 = 200, RChange::Float64 = -0.005)\n\nFunction that replicates Figures 3 and 4 from the MNS paper. Optional argument: Time horizon of interest rate change (TR). Size of interest rate change (RChange)\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_figures_5_6-Tuple{}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_figures_5_6","text":"get_figures_5_6(; Horizon::StepRange{Int64,Int64} = 1:2:41, T::Int64 = 200, RChange::Float64 = -0.005)\n\nFunction to replicate Figures 5 and 6 from the MNS paper. WARNING: Running this take quite long, as a large number of transition paths are computed\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_steady_state-Tuple{params, Float64, Vector{Float64}}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_steady_state","text":"get_steady_state(p::params,Y_guess::Float64,beta_Range::Array{Float64,1};tolβ::Float64=1e-6,tolY::Float64=1e-6)\n\nFinds the steady state for given interest rate by iterating over β, using a simple bisection type updating algorithm. I typically used Y = 0.6 as guess for Y and betaRange = [0.95,0.99] for the baseline calibration and [0.97,0.995]  for the high asset calibration, which works fine. Yguess not particularly important, I use the same as MNS.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_table_2-Tuple{}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_table_2","text":"get_table_2(;Horizon::Int=20,T::Int=200,RChange::Float64 = -0.005)\n\nFunction that generates the results in table 2 from the MNS paper. Returns a TypedTable.jl table containing the results. Baseline case: Interest rate change 20 periods ahead (Horizon), complete transition period length T=200,  one time interest rate change (RChange) of 50 basis points\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.get_transition_full-Tuple{Int64, Int64, params, steady_state}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.get_transition_full","text":"get_transition_full(TR::Int64,T::Int64,p::params,SS::steady_state; RChange::Float64 = -0.005)\n\nSolves for a steady state and a transition path. Inputs: TR (time until single-quarter interest rate change), T (time horizon transition path),  RChange (Change of R at time TR)\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.inv_dist-Tuple{SparseArrays.SparseMatrixCSC}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.inv_dist","text":"inv_dist(Π::SparseMatrixCSC)\n\nFind invariant steady state wealth distribution by solving for the eigenvector corresponding to the  unit eigenvalue of the transition matrix. Uses insights from https://discourse.julialang.org/t/stationary-distribution-with-sparse-transition-matrix/40301\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.lineartrans-Tuple{Vector{Float64}, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.lineartrans","text":"lineartrans(bp::Array{Float64,1},par::params)\n\nCalculates the new positions and transition probabilities on the asset grid for given savings choices. Used the to conduct a non-stochastic simulation a la Young (2010, JEDC).\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.logspaceshift-Tuple{Float64, Float64, Int64, Float64, Float64}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.logspaceshift","text":"logspaceshift(xa::Float64,xb::Float64,n::Int,x2::Float64,n_at_x2::Float64)\n\nA function involved in making the grids. Several methods available.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.makeknotd-Tuple{Float64, Float64, Int64, Float64}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.makeknotd","text":"makeknotd(kmin::Float64,kmax::Float64,n::Int,logshift::Float64)\n\nA Function involved in generating the household asset grid. Several methods available.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.margU","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.margU","text":"margU(c::Float64,par::params,order::Int64=1)\n\nHelper function, computes marginal utility of consumption or second derivative of utility function (if order = 2)\n\n\n\n\n\n","category":"function"},{"location":"#HANK_MNS.reshape_c-Tuple{Vector{Float64}, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.reshape_c","text":"reshape_c(c::Array{Float64},p::params)\n\nHelper function with two methods to replace par2wide and par2long from the MNS code.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.set_parameters-Tuple{}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.set_parameters","text":"set_parameters(;β::Float64 = 0.986,    # Discount factor\n                γ::Float64 = 2.0,      # Risk aversion\n                ψ::Float64 = 2.0,      # Inverse Frisch elasticity\n                ψ1::Float64 = 1.0,     # Labor disutility scaling (only in complete markets)\n                B::Float64 = 5.5,      # Supply of Assets: 1.4 times annual GDP = 5.6 times quarterly GDP\n                μ::Float64 = 1.2,      # Mark-up\n                θ::Float64 = 0.15,     # Probability that Calvo fairy visits\n                Rbar::Float64 = 1.005, # Target quarterly interest rate\n                nz::Int64 = 3,         # Number of income grid states\n                ρ::Float64 = 0.96566,            # Persistence parameter income process\n                σ::Float64 = 0.01695^0.5,        # Std of income process random comp\n                tax_weights::Array{Float64,1} = [0.0,0.0,1.0],   # Tax weights\n                a_min::Float64  = 0.0,           # Borrowing constraint\n                a_max::Float64 =75.0,            # Maximum asset holdings in grid\n                x_min::Float64 = 0.001,          # Parameter to generate the consumption knots\n                nk::Int64 = 1000,                # Number of grid points used for quadrature grid\n                nb::Int64 = 200)\n\nFunction to construct the parameter structure.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.simulate_forward-Tuple{Vector{Float64}, Matrix{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.simulate_forward","text":"simulate_forward(D0::Array{Float64,1},cpol_path::Array{Float64,2},Rpath::Array{Float64,1},\n                 wpath::Array{Float64,1},div_path::Array{Float64,1},τ_path::Array{Float64,1},p::params)\n\nSimulates a distribution of households and computes total consumption (C), labor supply (L), asset position (B) and wealth distribution (D)\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.simulate_step-Tuple{Vector{Float64}, Matrix{Float64}, Float64, Float64, Float64, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.simulate_step","text":"simulate_step(D::Array{Float64,1},c_pol::Array{Float64,2},R::Float64,w::Float64,\n              τ::Float64,div::Float64,p::params)\n\nConducts forward simulation for one period. Helper function to simulateforward, equivalent  to simulatestep() in MNS code.Originally used in loop in Simulateforward, replaced it to  do pre-allocation there.\n\nThe following was originally in the simulate forward loop: \n\nCpath[t], Lpath[t], Bpath[t], Dpath[:,t+1]  = simulateCLB(Dpath[:,t],reshapec(cpolpath[:,t],p)                                                       ,Rpath[t],wpath[t],τpath[t],div_path[t],p)\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.solve_for_transition-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, steady_state, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.solve_for_transition","text":"solve_for_transition(Rpath::Array{Float64,1},wpath::Array{Float64,1},div_path::Array{Float64,1},\n                     Spath::Array{Float64,1},SS::steady_state,p::params,S_tol::Float64=1e-6,w_tol::Float64=1e-6)\n\nSolves for the perfect foresight transition path for a given interest rate path, wpath, divpath, etc.  Those are guesses for the transition path. Note that guesses should include SS values as final element.\n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.solve_for_transition_CompMkts-Tuple{Any, Any, Any, Any, Any, Any, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.solve_for_transition_CompMkts","text":"solve_for_transition_CompMkts(Rpath, wagepath, dividendpath, Spath, stst, name, p::params)\n\nSolves for the complete markets transition path for a given interest rate path, wpage path, dividend path, etc. \n\n\n\n\n\n","category":"method"},{"location":"#HANK_MNS.solveback-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Array{Float64, N} where N, Vector{Float64}, Float64, params}","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"HANK_MNS.solveback","text":"solveback(c_final::Array{Float64,1},w_path::Array{Float64,1},R_path::Array{Float64,1},\n          τ_path::Array{Float64},div_path::Array{Float64,1},β::Float64,p::params)\n\nSolves backwards from a period (e.g. steady state) in which decision rules are known and given price/dividend paths. Relies on function EGM. (at the moment, this still omits β-heterogeneity). In wpath,τpath etc., the final values must correspond to the period to solve back from.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Replication of McKay, Nakamura, and Steinsson (2017)","title":"Replication of McKay, Nakamura, and Steinsson (2017)","text":"end","category":"page"}]
}
